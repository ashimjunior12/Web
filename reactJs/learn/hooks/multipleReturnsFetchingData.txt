import { useEffect, useState } from 'react';
const url = 'https://api.github.com/users/QuincyLarson';

const MultipleReturnsFetchData = () => {
  const [user, setUser] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isError, setIsError] = useState(false);

  useEffect(() => {
    const fetchUser = async () => {
      try {
        const resp = await fetch(url);
        if (!resp.ok) {
          setIsError(true);
          setIsLoading(false);
          return;
        }
        const user = await resp.json();
        setUser(user);
      } catch (error) {
        setIsError(true);
        console.log(error);
      }

      setIsLoading(false);
    };
    fetchUser();
  }, []);

  if (isLoading) {
    return <h2 className='loading'></h2>;
  }

  if (isError) {
    return <h2>There was an error...</h2>;
  }

  return (
    <>
      <h2>{user?.name}</h2>
      <img
        src={user?.avatar_url}
        style={{ width: '100px', borderRadius: '50%' }}
        alt=''
      />
      <h4>Works at: {user?.company}</h4>
    </>
  );
};
export default MultipleReturnsFetchData;



======================================================================================================

when we are fetching data from api there are basically three stages,
- loading stage
- error may occured
- data is fetched

so to handle these stages we used 3 state values in above code.

By default we will set the loading to true, and error to false.

After fetching the data successfully then we are setting the loading state to false.

And in case some error occured, we are handling it with the error state. If in case we face an error then error state will be set to true and we will return to the isError condition.

======================================================================================================

const resp = await fetch(url);
        if (!resp.ok) {
          setIsError(true);
          setIsLoading(false);
          return;
        }
        
        
=======================================================================================================

Now, for the above block, Unlike for example Axios, by default, the fetch() API does not consider HTTP status codes in the 4xx or 5xx range to be errors. Instead, it considers these status codes to be indicative of a successful request, so we if in the response object, if ok value has the false value, we are setting the Error state to true which will be handled in the below condition.

